//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BestEstimateDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HIL_BETrackerEntities : DbContext
    {
        public HIL_BETrackerEntities()
            : base("name=HIL_BETrackerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<sp_GetRevenue_Optimize_Result> sp_GetRevenue_Optimize(string mail_ID)
        {
            var mail_IDParameter = mail_ID != null ?
                new ObjectParameter("Mail_ID", mail_ID) :
                new ObjectParameter("Mail_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetRevenue_Optimize_Result>("sp_GetRevenue_Optimize", mail_IDParameter);
        }
    
        [DbFunction("HIL_BETrackerEntities", "fn_GetCurrNextQtr")]
        public virtual IQueryable<fn_GetCurrNextQtr_Result> fn_GetCurrNextQtr()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetCurrNextQtr_Result>("[HIL_BETrackerEntities].[fn_GetCurrNextQtr]()");
        }
    
        public virtual int sp_HIL_UpdateRevenue(string acctName, string pU, string curr_Code, Nullable<double> cQM1, Nullable<double> cQM2, Nullable<double> cQM3, Nullable<double> nQM1, Nullable<double> nQM2, Nullable<double> nQM3, string cQ_Remarks, string nQ_Remarks, string modified_By, Nullable<int> actuals_Count)
        {
            var acctNameParameter = acctName != null ?
                new ObjectParameter("acctName", acctName) :
                new ObjectParameter("acctName", typeof(string));
    
            var pUParameter = pU != null ?
                new ObjectParameter("PU", pU) :
                new ObjectParameter("PU", typeof(string));
    
            var curr_CodeParameter = curr_Code != null ?
                new ObjectParameter("curr_Code", curr_Code) :
                new ObjectParameter("curr_Code", typeof(string));
    
            var cQM1Parameter = cQM1.HasValue ?
                new ObjectParameter("CQM1", cQM1) :
                new ObjectParameter("CQM1", typeof(double));
    
            var cQM2Parameter = cQM2.HasValue ?
                new ObjectParameter("CQM2", cQM2) :
                new ObjectParameter("CQM2", typeof(double));
    
            var cQM3Parameter = cQM3.HasValue ?
                new ObjectParameter("CQM3", cQM3) :
                new ObjectParameter("CQM3", typeof(double));
    
            var nQM1Parameter = nQM1.HasValue ?
                new ObjectParameter("NQM1", nQM1) :
                new ObjectParameter("NQM1", typeof(double));
    
            var nQM2Parameter = nQM2.HasValue ?
                new ObjectParameter("NQM2", nQM2) :
                new ObjectParameter("NQM2", typeof(double));
    
            var nQM3Parameter = nQM3.HasValue ?
                new ObjectParameter("NQM3", nQM3) :
                new ObjectParameter("NQM3", typeof(double));
    
            var cQ_RemarksParameter = cQ_Remarks != null ?
                new ObjectParameter("CQ_Remarks", cQ_Remarks) :
                new ObjectParameter("CQ_Remarks", typeof(string));
    
            var nQ_RemarksParameter = nQ_Remarks != null ?
                new ObjectParameter("NQ_Remarks", nQ_Remarks) :
                new ObjectParameter("NQ_Remarks", typeof(string));
    
            var modified_ByParameter = modified_By != null ?
                new ObjectParameter("Modified_By", modified_By) :
                new ObjectParameter("Modified_By", typeof(string));
    
            var actuals_CountParameter = actuals_Count.HasValue ?
                new ObjectParameter("actuals_Count", actuals_Count) :
                new ObjectParameter("actuals_Count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_HIL_UpdateRevenue", acctNameParameter, pUParameter, curr_CodeParameter, cQM1Parameter, cQM2Parameter, cQM3Parameter, nQM1Parameter, nQM2Parameter, nQM3Parameter, cQ_RemarksParameter, nQ_RemarksParameter, modified_ByParameter, actuals_CountParameter);
        }
    }
}
